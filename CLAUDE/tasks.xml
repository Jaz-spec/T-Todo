<?xml version="1.0" encoding="UTF-8"?>
<task_list>
  <project>
    <name>Terminal Productivity Tool</name>
    <description>A terminal-based productivity tool for managing role-based to-do lists with window management and kanban views</description>
    <tech_stack>
      <language>Python 3.10+</language>
      <framework>Textual (TUI)</framework>
      <database>SQLite3</database>
      <dependencies>
        <dependency>textual</dependency>
        <dependency>python-dateutil</dependency>
        <dependency>rich</dependency>
        <dependency>prompt_toolkit</dependency>
      </dependencies>
    </tech_stack>
  </project>

  <user_flows>
    <flow priority="primary" id="role_management">
      <name>Role Management Flow</name>
      <description>Create role → View role → Manage role lifecycle</description>
    </flow>
    <flow priority="primary" id="task_management">
      <name>Task Management Flow</name>
      <description>Add task → View task → Edit task → Change status → Delete task</description>
    </flow>
    <flow priority="primary" id="window_management">
      <name>Window Management Flow</name>
      <description>Create layout → Navigate panels → Persist layout</description>
    </flow>
    <flow priority="primary" id="kanban">
      <name>Kanban Flow</name>
      <description>Switch to kanban view → Manage tasks → Return to role view</description>
    </flow>
    <flow priority="secondary" id="navigation">
      <name>Navigation Flow</name>
      <description>Keyboard navigation → Panel focus → Scrolling</description>
    </flow>
    <flow priority="secondary" id="command_history">
      <name>Command History Flow</name>
      <description>Execute commands → Navigate history</description>
    </flow>
    <flow priority="secondary" id="undo">
      <name>Undo Flow</name>
      <description>Delete something → Undo deletion</description>
    </flow>
    <flow priority="secondary" id="dependencies">
      <name>Dependency Flow</name>
      <description>Create blocking relationships → Visualize dependencies</description>
    </flow>
  </user_flows>

  <iteration_plan>
    <summary>
      <total_iterations>9</total_iterations>
      <foundation_phase>1</foundation_phase>
      <core_flow_phase>2</core_flow_phase>
      <horizontal_expansion_phase>3</horizontal_expansion_phase>
      <depth_phase>2</depth_phase>
      <polish_phase>1</polish_phase>
    </summary>
  </iteration_plan>

  <iterations>
    <!-- ITERATION 1 -->
    <iteration number="1">
      <phase>Foundation</phase>
      <complexity>Medium</complexity>
      <goal>Set up project structure, verify Textual framework works, establish database connection, and create a "Hello World" terminal interface with command input</goal>

      <tasks>
        <task id="1.1" complexity="simple">
          <name>Project Setup</name>
          <description>Create project directory structure as per spec</description>
          <steps>
            <step>Create project directory structure (main.py, app.py, database/, ui/, commands/, utils/, config.py)</step>
            <step>Set up virtual environment</step>
            <step>Install dependencies: textual, python-dateutil, rich, prompt_toolkit</step>
            <step>Create requirements.txt</step>
          </steps>
        </task>

        <task id="1.2" complexity="simple">
          <name>Database Foundation</name>
          <description>Create database schema and initialization</description>
          <steps>
            <step>Create database/models.py with SQLite connection setup</step>
            <step>Implement schema creation script for all tables: roles, tasks, task_dependencies, window_layout, undo_stack, archived_tasks</step>
            <step>Create database initialization function</step>
            <step>Verify database file creation and table structure</step>
          </steps>
        </task>

        <task id="1.3" complexity="medium">
          <name>Basic TUI Shell</name>
          <description>Set up Textual app with command input</description>
          <steps>
            <step>Create main.py entry point</step>
            <step>Create app.py with Textual App class</step>
            <step>Implement command input box at bottom of screen using Textual Input widget</step>
            <step>Implement basic command parser in commands/parser.py</step>
            <step>Test: Type "hello" → See command echoed back</step>
          </steps>
        </task>

        <task id="1.4" complexity="simple">
          <name>Color System</name>
          <description>Implement autumnal color palette</description>
          <steps>
            <step>Implement autumnal color palette in utils/colors.py (#D4A574, #C17817, #8B4513, #CD853F, #A0522D, #DAA520, #B8860B, #8B7355)</step>
            <step>Create color brightness adjustment functions (100%, 120%, 70%)</step>
            <step>Test color rendering in terminal</step>
          </steps>
        </task>
      </tasks>

      <testing>
        <manual>
          <test>Launch app and verify input box appears at bottom of screen</test>
          <test>Type commands in input box and verify they are recognized</test>
          <test>Verify colors display correctly in terminal</test>
          <test>Exit with Ctrl+C and verify clean shutdown</test>
          <test>Exit with "exit" command and verify clean shutdown</test>
        </manual>
        <automated>
          <test>Unit test for database schema creation</test>
          <test>Unit test for color utility functions (brightness adjustments)</test>
          <test>Test database file creation and table structure</test>
        </automated>
      </testing>

      <success_criteria>
        <criterion>Application launches without errors</criterion>
        <criterion>Can type in command input box</criterion>
        <criterion>Database file created with correct schema (all 6 tables)</criterion>
        <criterion>Can exit with Ctrl+C or exit command</criterion>
        <criterion>Autumnal colors display correctly</criterion>
      </success_criteria>

      <checkpoint>
        <question>Does the TUI framework feel right? Any concerns about Textual vs alternatives?</question>
        <action>Update task list based on framework learnings before proceeding</action>
      </checkpoint>
    </iteration>

    <!-- ITERATION 2 -->
    <iteration number="2">
      <phase>Core Flow Implementation</phase>
      <complexity>Complex</complexity>
      <goal>Implement the most critical flow: Create one role → Add tasks to it → View tasks in a single panel. This is the heart of the application</goal>

      <tasks>
        <task id="2.1" complexity="medium">
          <name>Role Creation Command</name>
          <description>Implement new role command with interactive prompts</description>
          <steps>
            <step>Implement "new role" command in commands/role_commands.py</step>
            <step>Create expandable input box (1/3 screen height)</step>
            <step>Implement sequential prompts: name → color selection with TAB</step>
            <step>Save role to database with auto-assigned display_number</step>
            <step>Return to normal view</step>
          </steps>
        </task>

        <task id="2.2" complexity="complex">
          <name>Single Role Panel Display</name>
          <description>Create role panel widget with proper styling</description>
          <steps>
            <step>Create ui/panels.py with RolePanel widget</step>
            <step>Implement full-screen role panel layout</step>
            <step>Display role name with number (e.g., "─ Work (r1) ─")</step>
            <step>Use role color for all borders and text</step>
            <step>Handle empty state (show empty panel with role name)</step>
          </steps>
        </task>

        <task id="2.3" complexity="simple">
          <name>Role Selection</name>
          <description>Implement role selection and switching</description>
          <steps>
            <step>Implement "r[number]" command to select active role</step>
            <step>Store active role in application state</step>
            <step>Add visual indicator for active role (brighten border to 120%)</step>
            <step>Implement "r" + TAB to cycle through roles</step>
          </steps>
        </task>

        <task id="2.4" complexity="medium">
          <name>Basic Task Creation</name>
          <description>Implement add command with full prompt sequence</description>
          <steps>
            <step>Implement "add" command with interactive prompts</step>
            <step>Prompt sequence: title → description (multi-line with SHIFT+ENTER) → due date → priority → story points → blocking tasks</step>
            <step>Implement per-role task numbering (t1, t2, t3...)</step>
            <step>Save task to database</step>
            <step>Display tasks in role panel (format: "t[number]: [title] - [relative date]")</step>
          </steps>
        </task>

        <task id="2.5" complexity="medium">
          <name>Task Display in Role Panel</name>
          <description>Render task list with proper sorting and formatting</description>
          <steps>
            <step>Implement task list rendering in role panel</step>
            <step>Display format: "t[number]: [title] - [relative date]"</step>
            <step>Sort by: in-progress (top) → separator → todo (by due date)</step>
            <step>Implement in-progress separator (thin dashed line in role color)</step>
            <step>Implement scrolling for long task lists</step>
          </steps>
        </task>

        <task id="2.6" complexity="medium">
          <name>Date Utilities</name>
          <description>Implement date parsing and relative display</description>
          <steps>
            <step>Create utils/date_utils.py</step>
            <step>Implement date parsing (DD MM YY format)</step>
            <step>Implement relative date display (Today, Tomorrow, Yesterday, Next Monday, Tues 15 Oct)</step>
            <step>Handle date validation and errors</step>
          </steps>
        </task>
      </tasks>

      <testing>
        <manual>
          <test>Create a role named "Work" with orange color</test>
          <test>Select the role with "r1"</test>
          <test>Add 3 tasks with various due dates (today, tomorrow, next week)</test>
          <test>Verify tasks display with correct relative dates</test>
          <test>Add more tasks and verify scrolling works</test>
          <test>Verify in-progress separator appears when task marked as doing</test>
        </manual>
        <automated>
          <test>Unit tests for date parsing (DD MM YY format)</test>
          <test>Unit tests for relative date display logic</test>
          <test>Unit tests for task numbering logic (per-role sequential)</test>
          <test>Test task sorting algorithm</test>
        </automated>
      </testing>

      <success_criteria>
        <criterion>Can create a role and see it displayed full-screen</criterion>
        <criterion>Can add tasks and see them listed in role panel</criterion>
        <criterion>Dates display in correct relative format</criterion>
        <criterion>Tasks sorted correctly (in-progress → separator → todo by date)</criterion>
        <criterion>Can scroll through tasks if list is long</criterion>
        <criterion>Role color applied to all panel elements</criterion>
      </success_criteria>

      <checkpoint>
        <question>How does the command flow feel? Is the interactive prompt approach working well?</question>
        <action>Update task list based on task management learnings before proceeding</action>
      </checkpoint>
    </iteration>

    <!-- ITERATION 3 -->
    <iteration number="3">
      <phase>Core Flow Implementation</phase>
      <complexity>Medium</complexity>
      <goal>Complete the core task management flow by adding view, edit, delete, and status changes. Now we have a minimal but complete task manager</goal>

      <tasks>
        <task id="3.1" complexity="simple">
          <name>Task View Command</name>
          <description>Implement full-screen task detail view</description>
          <steps>
            <step>Implement "t[number] view" command</step>
            <step>Create ui/task_detail.py with full-screen task detail view</step>
            <step>Display all task properties: title, description (rendered markdown), due date, priority, story points, status</step>
            <step>Show "Press any key to return" prompt</step>
            <step>Handle missing optional fields gracefully</step>
          </steps>
        </task>

        <task id="3.2" complexity="medium">
          <name>Task Edit Command</name>
          <description>Implement task editing with pre-filled values</description>
          <steps>
            <step>Implement "t[number] edit" command</step>
            <step>Reuse add command prompt flow but pre-fill with current values</step>
            <step>Update task in database</step>
            <step>Refresh role panel display</step>
          </steps>
        </task>

        <task id="3.3" complexity="simple">
          <name>Task Delete Command</name>
          <description>Implement task deletion with confirmation and undo</description>
          <steps>
            <step>Implement "t[number] delete" command</step>
            <step>Show confirmation prompt: "Are you sure? (yes/no)"</step>
            <step>Delete from database</step>
            <step>Implement basic undo stack (save deleted task data as JSON)</step>
            <step>Refresh role panel display</step>
          </steps>
        </task>

        <task id="3.4" complexity="simple">
          <name>Task Status Commands</name>
          <description>Implement task status transitions</description>
          <steps>
            <step>Implement "t[number] doing", "t[number] done", "t[number] todo"</step>
            <step>Update task status in database</step>
            <step>For "done": set completed_at timestamp</step>
            <step>Refresh role panel to show in-progress separator and updated sorting</step>
          </steps>
        </task>

        <task id="3.5" complexity="simple">
          <name>Undo Command</name>
          <description>Implement undo for deleted tasks</description>
          <steps>
            <step>Implement "undo" command</step>
            <step>Restore last deleted task from undo_stack</step>
            <step>Show confirmation message: "Restored task: 't4 - Call boss'"</step>
            <step>Limit undo stack to last 20 operations</step>
          </steps>
        </task>

        <task id="3.6" complexity="medium">
          <name>Basic Error Handling</name>
          <description>Implement error messages and help command</description>
          <steps>
            <step>Implement error messages for invalid commands</step>
            <step>Handle: task not found, invalid task number, no active role selected</step>
            <step>Display errors in command box area (red text)</step>
            <step>Implement "help" command with basic command list</step>
          </steps>
        </task>
      </tasks>

      <testing>
        <manual>
          <test>View a task's full details including markdown description</test>
          <test>Edit a task and verify all changes persist</test>
          <test>Delete a task, then undo it and verify restoration</test>
          <test>Mark tasks as doing/done/todo and verify separator appears</test>
          <test>Try invalid commands and verify error messages display</test>
          <test>Run "help" command and verify command list shows</test>
        </manual>
        <automated>
          <test>Unit tests for undo stack logic (LIFO, limit 20)</test>
          <test>Unit tests for status transitions</test>
          <test>Unit tests for error message formatting</test>
        </automated>
      </testing>

      <success_criteria>
        <criterion>Can view full task details including markdown-rendered description</criterion>
        <criterion>Can edit all task properties with pre-filled values</criterion>
        <criterion>Can delete and undo task deletion</criterion>
        <criterion>Can change task status and see visual changes (separator line)</criterion>
        <criterion>Error messages display for invalid commands</criterion>
        <criterion>Help command shows available commands</criterion>
      </success_criteria>

      <checkpoint>
        <question>Is the task lifecycle complete and intuitive? Any UX issues discovered?</question>
        <action>Update task list based on learnings before proceeding</action>
      </checkpoint>
    </iteration>

    <!-- ITERATION 4 -->
    <iteration number="4">
      <phase>Horizontal Feature Expansion</phase>
      <complexity>Complex</complexity>
      <goal>Add multi-panel window management so users can view multiple roles simultaneously. This is the second major user flow</goal>

      <tasks>
        <task id="4.1" complexity="complex">
          <name>Window Layout Command</name>
          <description>Implement multi-panel layout creation</description>
          <steps>
            <step>Implement "window [number]" command in commands/window_commands.py</step>
            <step>Create panel layout calculator for 1-8 panels (vertical priority: 1=full, 2=50/50, 3=left 50% + right 2x25%, etc.)</step>
            <step>Implement role selector with TAB cycling for each panel</step>
            <step>Store selected layout in window_layout table</step>
            <step>Render multiple role panels in calculated positions</step>
          </steps>
        </task>

        <task id="4.2" complexity="complex">
          <name>Multi-Panel Rendering</name>
          <description>Update app to support multiple simultaneous panels</description>
          <steps>
            <step>Update app.py to support multiple RolePanel widgets</step>
            <step>Calculate panel positions and sizes based on layout (1-8 panels)</step>
            <step>Implement 2-character gaps between panels</step>
            <step>Apply border radius to all panels</step>
            <step>Ensure each panel maintains its own scroll state</step>
          </steps>
        </task>

        <task id="4.3" complexity="medium">
          <name>Panel Focus Management</name>
          <description>Implement focus cycling and visual indicators</description>
          <steps>
            <step>Implement TAB to cycle focus between visible panels</step>
            <step>Brighten focused panel border (120% brightness)</step>
            <step>Normal brightness for unfocused panels (100%)</step>
            <step>Track focused panel in application state</step>
          </steps>
        </task>

        <task id="4.4" complexity="simple">
          <name>Close Window Command</name>
          <description>Implement panel closing and layout adjustment</description>
          <steps>
            <step>Implement "close" command</step>
            <step>Remove focused panel from layout</step>
            <step>Recalculate remaining panel positions</step>
            <step>Update window_layout in database</step>
          </steps>
        </task>

        <task id="4.5" complexity="medium">
          <name>Layout Persistence</name>
          <description>Implement layout saving and loading</description>
          <steps>
            <step>Load window layout from database on startup</step>
            <step>If no saved layout, show empty screen</step>
            <step>Save layout changes immediately (auto-save with 300ms debounce)</step>
            <step>Handle edge cases (roles deleted, invalid role references)</step>
          </steps>
        </task>
      </tasks>

      <testing>
        <manual>
          <test>Create window with 1, 2, 3, 4, 5, 6, 7, 8 panels and verify layouts match specification</test>
          <test>TAB through panels and verify focus highlighting (120% brightness)</test>
          <test>Close panels and verify layout recalculates correctly</test>
          <test>Restart app and verify layout persists</test>
          <test>Create multiple roles and assign to different panels</test>
          <test>Verify 2-character gaps between all panels</test>
        </manual>
        <automated>
          <test>Unit tests for layout calculation algorithm (1-8 panels)</test>
          <test>Unit tests for panel position math</test>
          <test>Test layout persistence to database</test>
        </automated>
      </testing>

      <success_criteria>
        <criterion>Can create layouts with 1-8 panels in correct positions</criterion>
        <criterion>Panel layouts follow vertical priority rule</criterion>
        <criterion>Can TAB between panels with visual focus indicator</criterion>
        <criterion>Can close panels and layout adjusts automatically</criterion>
        <criterion>Layout persists across application restarts</criterion>
        <criterion>All panels maintain independent scroll states</criterion>
      </success_criteria>

      <checkpoint>
        <question>Are the window layouts intuitive? Any issues with panel sizing or focus?</question>
        <action>Update task list based on window management learnings before proceeding</action>
      </checkpoint>
    </iteration>

    <!-- ITERATION 5 -->
    <iteration number="5">
      <phase>Horizontal Feature Expansion</phase>
      <complexity>Medium</complexity>
      <goal>Add kanban board view as an alternative way to visualize tasks for a single role. This completes the major viewing modes</goal>

      <tasks>
        <task id="5.1" complexity="medium">
          <name>Kanban View Structure</name>
          <description>Create kanban board widget with three columns</description>
          <steps>
            <step>Create ui/kanban.py with KanbanView widget</step>
            <step>Implement three-column layout: TODO | DOING | DONE</step>
            <step>Display role name in header with "- KANBAN" suffix</step>
            <step>Use role color for all borders and text</step>
          </steps>
        </task>

        <task id="5.2" complexity="medium">
          <name>Kanban Task Cards</name>
          <description>Render tasks as cards in appropriate columns</description>
          <steps>
            <step>Render tasks as cards in appropriate columns based on status</step>
            <step>Display format: task number, title, due date, priority, story points</step>
            <step>Sort tasks within columns by due date</step>
            <step>Handle empty columns gracefully</step>
          </steps>
        </task>

        <task id="5.3" complexity="simple">
          <name>Kanban Enter/Exit Commands</name>
          <description>Implement view switching between role and kanban</description>
          <steps>
            <step>Implement "k" command to enter kanban view for active role</step>
            <step>Implement "r" command to exit kanban back to role view</step>
            <step>Maintain active role state across view transitions</step>
            <step>All task commands (edit, delete, status) work identically in kanban</step>
          </steps>
        </task>

        <task id="5.4" complexity="simple">
          <name>Done Column Auto-Archive</name>
          <description>Implement automatic archiving of completed tasks</description>
          <steps>
            <step>Create background task scheduler</step>
            <step>Check every hour for tasks in "done" status for &gt;24 hours</step>
            <step>Move to archived_tasks table with timestamp</step>
            <step>Delete from tasks table (silent cleanup)</step>
          </steps>
        </task>
      </tasks>

      <testing>
        <manual>
          <test>Select a role and enter kanban view with "k"</test>
          <test>Verify tasks appear in correct columns (TODO, DOING, DONE)</test>
          <test>Move tasks between columns with "t[number] doing/done/todo"</test>
          <test>Exit kanban with "r" and verify return to role view</test>
          <test>Test with empty columns and verify layout</test>
          <test>Simulate 24+ hour wait and verify done tasks archive (or use manual trigger)</test>
        </manual>
        <automated>
          <test>Unit tests for archive logic (time-based comparison)</test>
          <test>Unit tests for column assignment based on status</test>
          <test>Test background scheduler execution</test>
        </automated>
      </testing>

      <success_criteria>
        <criterion>Kanban view displays three columns correctly</criterion>
        <criterion>Tasks appear in correct columns based on status</criterion>
        <criterion>Can move tasks between columns using commands</criterion>
        <criterion>Can execute all task commands in kanban view</criterion>
        <criterion>Can switch between kanban and role view seamlessly</criterion>
        <criterion>Done tasks auto-archive after 24 hours</criterion>
      </success_criteria>

      <checkpoint>
        <question>Does the kanban view feel complete? Is the column layout clear?</question>
        <action>Update task list based on kanban implementation learnings before proceeding</action>
      </checkpoint>
    </iteration>

    <!-- ITERATION 6 -->
    <iteration number="6">
      <phase>Horizontal Feature Expansion</phase>
      <complexity>Medium</complexity>
      <goal>Add keyboard navigation mode for scrolling and window movement, plus complete role management features (remap, delete). This rounds out the core interaction patterns</goal>

      <tasks>
        <task id="6.1" complexity="medium">
          <name>Navigation Mode</name>
          <description>Implement dual-mode input system</description>
          <steps>
            <step>Implement mode switching: any letter key → command mode, ESC from typing → navigation mode</step>
            <step>Display "(nav)" indicator in command box corner when in navigation mode</step>
            <step>In navigation mode: arrow keys scroll focused panel, Space+Arrow moves panel position</step>
            <step>In command mode: arrow keys for command history, normal typing</step>
          </steps>
        </task>

        <task id="6.2" complexity="medium">
          <name>Panel Scrolling</name>
          <description>Implement arrow key scrolling for panels</description>
          <steps>
            <step>Implement arrow up/down scrolling for focused panel</step>
            <step>Track scroll position per panel</step>
            <step>Show scroll indicators (if content exceeds visible area)</step>
            <step>Ensure smooth scrolling behavior</step>
          </steps>
        </task>

        <task id="6.3" complexity="complex">
          <name>Panel Movement</name>
          <description>Implement keyboard-based panel repositioning</description>
          <steps>
            <step>Implement Space+Arrow keys to swap panel positions</step>
            <step>Update window_layout in database after movement</step>
            <step>Maintain focus on moved panel</step>
            <step>Handle edge cases (can't move single panel, boundary limits)</step>
          </steps>
        </task>

        <task id="6.4" complexity="medium">
          <name>Role Remap Command</name>
          <description>Implement role number reassignment</description>
          <steps>
            <step>Implement "role remap" command</step>
            <step>Expand input box to show full list of roles with current numbers</step>
            <step>Allow typing new numbers next to role names</step>
            <step>Update display_number in database for all affected roles</step>
            <step>Refresh all visible panels with new numbers</step>
          </steps>
        </task>

        <task id="6.5" complexity="simple">
          <name>Role Delete Command</name>
          <description>Implement role deletion with validation</description>
          <steps>
            <step>Implement "delete" command when role is selected</step>
            <step>Show confirmation: "Are you sure you want to delete role 'Work'? (yes/no)"</step>
            <step>Check if role has tasks and warn/prevent deletion</step>
            <step>Delete role from database</step>
            <step>Close any panels displaying that role</step>
            <step>Add to undo stack for role restoration</step>
          </steps>
        </task>

        <task id="6.6" complexity="simple">
          <name>Command History</name>
          <description>Implement command history with arrow keys</description>
          <steps>
            <step>Implement up/down arrow command history in command mode</step>
            <step>Store last 50 commands</step>
            <step>Cycle through with arrow keys</step>
            <step>Pre-fill command box with historical command</step>
          </steps>
        </task>
      </tasks>

      <testing>
        <manual>
          <test>Switch between navigation and command modes with letter keys and ESC</test>
          <test>Verify "(nav)" indicator appears in command box</test>
          <test>Scroll through long task lists with arrow keys in navigation mode</test>
          <test>Move panels around with Space+Arrow in navigation mode</test>
          <test>Remap role numbers and verify changes throughout UI</test>
          <test>Try to delete role with tasks (should warn/prevent)</test>
          <test>Delete empty role and undo deletion</test>
          <test>Use arrow keys for command history in command mode</test>
        </manual>
        <automated>
          <test>Unit tests for command history logic (FIFO, limit 50)</test>
          <test>Unit tests for role deletion validation</test>
          <test>Unit tests for mode switching logic</test>
        </automated>
      </testing>

      <success_criteria>
        <criterion>Can switch smoothly between command and navigation modes</criterion>
        <criterion>Mode indicator visible in command box</criterion>
        <criterion>Arrow keys scroll panels in navigation mode</criterion>
        <criterion>Space+Arrow moves panels around screen</criterion>
        <criterion>Can remap role numbers successfully</criterion>
        <criterion>Role deletion validates and prevents issues</criterion>
        <criterion>Command history works with up/down arrows</criterion>
      </success_criteria>

      <checkpoint>
        <question>Is navigation mode intuitive? Any confusion about mode switching?</question>
        <action>Update task list based on navigation and role management learnings before proceeding</action>
      </checkpoint>
    </iteration>

    <!-- ITERATION 7 -->
    <iteration number="7">
      <phase>Depth and Robustness</phase>
      <complexity>Medium</complexity>
      <goal>Add task dependency tracking (blocking relationships) and batch operations for efficiency. This adds sophistication to existing task management</goal>

      <tasks>
        <task id="7.1" complexity="simple">
          <name>Task Dependencies Data</name>
          <description>Implement dependency storage and validation</description>
          <steps>
            <step>Implement dependency storage in task_dependencies table</step>
            <step>Add blocking task IDs to task creation/edit prompts</step>
            <step>Validate dependency references (check task exists in same role)</step>
            <step>Store bidirectional relationship (task blocks another)</step>
          </steps>
        </task>

        <task id="7.2" complexity="medium">
          <name>Dependency Visualization</name>
          <description>Implement visual indicators for blocked tasks</description>
          <steps>
            <step>In role view: render blocked tasks with 70% brightness (dulled color)</step>
            <step>In task detail view: show "Blocks: t7, t9" and "Blocked by: t2" sections</step>
            <step>In kanban view: show blocked tasks with dulled color</step>
            <step>Calculate transitive dependencies (if t1 blocks t2, and t2 blocks t3)</step>
          </steps>
        </task>

        <task id="7.3" complexity="medium">
          <n>Batch Task Operations</n>
          <description>Implement comma-separated task commands</description>
          <steps>
            <step>Implement comma-separated task syntax: "t1,t3,t5 delete"</step>
            <step>Parse batch commands in commands/parser.py</step>
            <step>Show aggregate confirmation: "Are you sure you want to delete 3 tasks?"</step>
            <step>Support batch for: delete, doing, done, todo commands</step>
            <step>Execute all operations or none (transaction-like behavior)</step>
          </steps>
        </task>

        <task id="7.4" complexity="simple">
          <n>Quick Add Task Syntax</n>
          <description>Implement shorthand task creation</description>
          <steps>
            <step>Implement shorthand: add "Task title" DD MM YY Priority StoryPoints</step>
            <step>Parse quoted title and positional parameters</step>
            <step>Fall back to interactive prompts for missing parameters</step>
            <step>Support: add "Quick task" (just title, rest defaults)</step>
          </steps>
        </task>
      </tasks>

      <testing>
        <manual>
          <test>Create task with blocking dependencies (t1 blocks t2)</test>
          <test>Verify blocked task appears dulled (70% brightness)</test>
          <test>View task detail and verify dependency display (Blocks/Blocked by sections)</test>
          <test>Try batch delete on 3 tasks and verify confirmation</test>
          <test>Try batch status change (t1,t2,t3 doing)</test>
          <test>Use quick add syntax with various parameter combinations</test>
          <test>Test transitive dependencies (t1→t2→t3)</test>
        </manual>
        <automated>
          <test>Unit tests for dependency parsing</test>
          <test>Unit tests for batch command parsing</test>
          <test>Unit tests for quick add syntax parsing</test>
          <test>Unit tests for circular dependency detection</test>
        </automated>
      </testing>

      <success_criteria>
        <criterion>Can create tasks with blocking dependencies</criterion>
        <criterion>Blocked tasks display with 70% brightness</criterion>
        <criterion>Task detail view shows blocking and blocked-by relationships</criterion>
        <criterion>Batch operations work for multiple tasks</criterion>
        <criterion>Quick add syntax creates tasks correctly</criterion>
        <criterion>All dependencies validate properly</criterion>
      </success_criteria>

      <checkpoint>
        <question>Do dependencies feel useful? Is batch operation syntax clear?</question>
        <action>Update task list based on advanced features learnings before proceeding</action>
      </checkpoint>
    </iteration>

    <!-- ITERATION 8 -->
    <iteration number="8">
      <phase>Depth and Robustness</phase>
      <complexity>Medium</complexity>
      <goal>Harden the application with comprehensive validation, edge case handling, and improved error messages. Make it production-ready from a stability perspective</goal>

      <tasks>
        <task id="8.1" complexity="medium">
          <n>Input Validation</n>
          <description>Implement comprehensive input validators</description>
          <steps>
            <step>Create utils/validators.py</step>
            <step>Validate date formats strictly (DD MM YY)</step>
            <step>Validate story points (only Fibonacci: 1,2,3,5,8,13)</step>
            <step>Validate priority (only High/Medium/Low)</step>
            <step>Validate task/role references exist</step>
            <step>Show specific error messages for each validation failure</step>
          </steps>
        </task>

        <task id="8.2" complexity="medium">
          <n>Edge Case Handling</n>
          <description>Handle all edge cases gracefully</description>
          <steps>
            <step>Handle empty role name input</step>
            <step>Handle tasks with no due date (display at bottom)</step>
            <step>Handle circular dependencies (prevent t1 blocks t2, t2 blocks t1)</step>
            <step>Handle role deletion with tasks (force move/delete tasks first)</step>
            <step>Handle invalid panel numbers in window command</step>
            <step>Handle malformed batch commands</step>
          </steps>
        </task>

        <task id="8.3" complexity="simple">
          <n>Enhanced Error Messages</n>
          <description>Create comprehensive error messaging system</description>
          <steps>
            <step>Create error message templates</step>
            <step>Examples: "Task t99 not found in role r3", "Invalid date format. Use DD MM YY"</step>
            <step>Add context to errors (what was attempted, what went wrong, how to fix)</step>
            <step>Display errors in consistent format (red text in command area)</step>
          </steps>
        </task>

        <task id="8.4" complexity="simple">
          <n>Improved Help System</n>
          <description>Expand help command with categories</description>
          <steps>
            <step>Implement "help" with overview</step>
            <step>Implement "help roles" for role commands</step>
            <step>Implement "help tasks" for task commands</step>
            <step>Implement "help windows" for window commands</step>
            <step>Implement "help kanban" for kanban commands</step>
            <step>Show command examples in help text</step>
          </steps>
        </task>

        <task id="8.5" complexity="medium">
          <n>Data Integrity</n>
          <description>Ensure database consistency and constraints</description>
          <steps>
            <step>Add database constraints (foreign keys, check constraints)</step>
            <step>Implement cascade deletes for role → tasks</step>
            <step>Clean up orphaned dependencies on task delete</step>
            <step>Validate database state on startup (repair if needed)</step>
          </steps>
        </task>
      </tasks>

      <testing>
        <manual>
          <test>Try to create task with invalid date format</test>
          <test>Try to create task with invalid story points (e.g., 4)</test>
          <test>Try to reference non-existent task in dependency</test>
          <test>Try to create circular dependency (t1→t2→t1)</test>
          <test>Try to delete role with tasks</test>
          <test>View help for each command category</test>
          <test>Test all edge cases identified in 8.2</test>
        </manual>
        <automated>
          <test>Unit tests for all validators</test>
          <test>Integration tests for edge cases</test>
          <test>Database integrity tests</test>
          <test>Test circular dependency detection algorithm</test>
        </automated>
      </testing>

      <success_criteria>
        <criterion>All inputs validated with clear error messages</criterion>
        <criterion>Edge cases handled gracefully (no crashes)</criterion>
        <criterion>Circular dependencies prevented</criterion>
        <criterion>Help system comprehensive and useful</criterion>
        <criterion>Database maintains referential integrity</criterion>
        <criterion>Application never enters invalid state</criterion>
      </success_criteria>

      <checkpoint>
        <question>Does the application feel robust? Any remaining edge cases discovered?</question>
        <action>Update task list based on hardening learnings before proceeding</action>
      </checkpoint>
    </iteration>

    <!-- ITERATION 9 -->
    <iteration number="9">
      <phase>Polish</phase>
      <complexity>Medium</complexity>
      <goal>Final polish pass: improve visual design, optimize performance, add quality-of-life features. Make it feel professional and smooth</goal>

      <tasks>
        <task id="9.1" complexity="medium">
          <n>Visual Refinements</n>
          <description>Polish all visual elements</description>
          <steps>
            <step>Implement proper border radius using Unicode box-drawing characters (╭─╮│╰╯)</step>
            <step>Ensure consistent 2-character gaps between all panels</step>
            <step>Perfect the in-progress separator line (thin, dashed, role color)</step>
            <step>Adjust brightness levels for perfect visual hierarchy</step>
            <step>Polish empty state messages</step>
            <step>Add subtle animation to panel focus transitions (if Textual supports)</step>
          </steps>
        </task>

        <task id="9.2" complexity="simple">
          <n>Color System Refinement</n>
          <description>Verify and adjust color palette</description>
          <steps>
            <step>Verify all 8 autumnal colors are distinct and accessible</step>
            <step>Ensure 70% brightness for blocked tasks is visible but clearly different</step>
            <step>Test color scheme on different terminal backgrounds (dark/light)</step>
            <step>Adjust colors if needed for readability</step>
          </steps>
        </task>

        <task id="9.3" complexity="medium">
          <n>Performance Optimization</n>
          <description>Optimize rendering and database queries</description>
          <steps>
            <step>Implement lazy loading: only load visible tasks</step>
            <step>Add database indexes: (role_id, status, due_date)</step>
            <step>Implement debouncing for auto-save (300ms)</step>
            <step>Optimize panel re-rendering (only redraw changed panels)</step>
            <step>Profile and optimize slow queries</step>
          </steps>
        </task>

        <task id="9.4" complexity="simple">
          <n>Quality of Life Features</n>
          <description>Add convenience features</description>
          <steps>
            <step>Add command autocompletion with TAB</step>
            <step>Show task count in role panel header</step>
            <step>Add keyboard shortcut summary (accessible with "help shortcuts")</step>
            <step>Implement context-aware help (show relevant commands based on active mode/view)</step>
            <step>Add "Did you mean?" suggestions for typos</step>
          </steps>
        </task>

        <task id="9.5" complexity="medium">
          <n>Final Testing and Bug Fixes</n>
          <description>Comprehensive testing and polish</description>
          <steps>
            <step>Comprehensive manual testing of all flows</step>
            <step>Test with large datasets (100+ tasks, 8 roles)</step>
            <step>Test rapid command execution</step>
            <step>Fix any discovered bugs</step>
            <step>Test on different terminal emulators (iTerm2, Terminal.app, etc.)</step>
          </steps>
        </task>

        <task id="9.6" complexity="simple">
          <n>Documentation</n>
          <description>Create user documentation</description>
          <steps>
            <step>Create README.md with installation and usage instructions</step>
            <step>Add inline code comments for complex logic</step>
            <step>Document database schema</step>
            <step>Create troubleshooting guide</step>
          </steps>
        </task>
      </tasks>

      <testing>
        <manual>
          <test>Full regression test of all features</test>
          <test>Performance test with 100+ tasks across 8 roles</test>
          <test>Visual inspection on multiple terminal emulators</test>
          <test>Usability testing (fresh eyes if possible)</test>
          <test>Test color accessibility on different backgrounds</test>
        </manual>
        <automated>
          <test>Performance benchmarks for database queries</test>
          <test>Load testing with large datasets</test>
          <test>Render performance tests</test>
        </automated>
      </testing>

      <success_criteria>
        <criterion>Visual design is polished and professional</criterion>
        <criterion>No noticeable lag or performance issues</criterion>
        <criterion>All colors accessible and distinct</criterion>
        <criterion>Command autocompletion works</criterion>
        <criterion>Application feels smooth and responsive</criterion>
        <criterion>Documentation complete and clear</criterion>
        <criterion>No known bugs</criterion>
      </success_criteria>

      <checkpoint>
        <question>Is the application ready for real-world use? Any final adjustments needed?</question>
        <action>None - final iteration complete</action>
      </checkpoint>
    </iteration>
  </iterations>

  <refactoring_notes>
    <note phase="between_iterations_3_4">
      <title>Command Parser Refactoring</title>
      <description>If command parser becomes unwieldy with many commands, consider refactoring to command pattern with separate handler classes</description>
    </note>
    <note phase="between_iterations_5_6">
      <title>View Management</title>
      <description>Consider extracting view management (role view, kanban view) into separate controller to simplify app.py</description>
    </note>
    <note phase="between_iterations_7_8">
      <title>Database Query Optimization</title>
      <description>Optimize database queries before adding more complexity. Add indexes and consider query caching</description>
    </note>
  </refactoring_notes>

  <patterns_to_watch>
    <pattern>
      <n>Command Pattern</n>
      <description>All commands should follow consistent structure (parse → validate → execute → update UI)</description>
    </pattern>
    <pattern>
      <n>Panel Widget</n>
      <description>May need generalization as more panel types emerge (consider base class)</description>
    </pattern>
    <pattern>
      <n>Database Layer</n>
      <description>Consider ORM vs raw SQL as complexity grows (currently raw SQL for simplicity)</description>
    </pattern>
    <pattern>
      <n>State Management</n>
      <description>Track active role, focused panel, current mode centrally in app state</description>
    </pattern>
  </patterns_to_watch>

  <testing_strategy_evolution>
    <phase name="iterations_1_3">
      <approach>Primarily manual testing with basic unit tests</approach>
      <focus>Does it work? Can I use it?</focus>
    </phase>
    <phase name="iterations_4_6">
      <approach>Add integration tests for complex flows</approach>
      <focus>Do features work together? Are there interaction bugs?</focus>
    </phase>
    <phase name="iterations_7_9">
      <approach>Comprehensive automated test suite with performance testing</approach>
      <focus>Is it robust? Is it fast? Is it production-ready?</focus>
    </phase>
  </testing_strategy_evolution>

  <complexity_distribution>
    <simple>40% of tasks - foundational, straightforward features</simple>
    <medium>45% of tasks - moderate complexity, some edge cases</medium>
    <complex>15% of tasks - multi-panel rendering, layout algorithms, advanced features</complex>
  </complexity_distribution>

  <getting_started>
    <recommendation>Begin with Iteration 1 to set up the foundation. After completing Iteration 1, checkpoint to ensure the TUI framework choice (Textual) is working well before proceeding</recommendation>
    <questions>
      <question>Does this iteration breakdown match your learning style and timeline?</question>
      <question>Would you prefer more or fewer iterations (e.g., combine some, split others)?</question>
      <question>Are there any features you'd like to prioritize differently?</question>
      <question>Do you want to start immediately with Iteration 1, or discuss the plan first?</question>
    </questions>
  </getting_started>
</task_list>
