"""Main TUI application using Textual."""
from textual.app import App, ComposeResult
from textual.widgets import Input, Static, Header
from textual.containers import Container, Vertical
from textual.binding import Binding
from ttodo.commands.parser import parser
from ttodo.commands import role_commands, task_commands
from ttodo.database.models import db
from ttodo.database.migrations import initialize_database
from ttodo.ui.panels import RolePanel
from ttodo.utils.colors import ROLE_COLORS, get_next_color_index, get_role_color
import re


class CommandInput(Input):
    """Custom command input widget."""

    def __init__(self):
        super().__init__(placeholder="Type a command... (type 'help' for commands)")
        self.command_history = []
        self.history_index = -1

    def add_to_history(self, command: str):
        """Add command to history."""
        if command and (not self.command_history or command != self.command_history[-1]):
            self.command_history.append(command)
            if len(self.command_history) > 50:  # Max 50 commands
                self.command_history.pop(0)
        self.history_index = len(self.command_history)


class MainContent(Static):
    """Main content area for panels/views."""

    def __init__(self):
        super().__init__("Welcome to Terminal Todo!\n\nType 'new role' to get started.")
        self.add_class("main-content")


class TodoApp(App):
    """Terminal Todo TUI Application."""

    CSS = """
    Screen {
        background: $surface;
    }

    .main-content {
        height: 1fr;
        padding: 1;
        background: $surface;
        color: $text;
    }

    .input-container {
        height: auto;
        dock: bottom;
        background: $surface;
        padding: 1;
    }

    CommandInput {
        width: 100%;
    }

    .error {
        color: $error;
    }

    .success {
        color: $success;
    }
    """

    BINDINGS = [
        Binding("ctrl+c", "quit", "Quit", show=True),
        Binding("escape", "clear_input", "Clear", show=False),
    ]

    def __init__(self):
        super().__init__()
        self.main_content = None
        self.command_input = None
        self.active_role_id = None  # Currently selected role
        self.current_panel = None  # Currently displayed panel widget
        # State flags for interactive input
        self._awaiting_role_name = False
        self._awaiting_task_title = False
        self._awaiting_task_due_date = False
        self._pending_task_title = None

    def compose(self) -> ComposeResult:
        """Compose the UI layout."""
        self.main_content = MainContent()
        self.command_input = CommandInput()

        yield self.main_content

        # Input container at bottom
        with Container(classes="input-container"):
            yield Static("> ", id="prompt")
            yield self.command_input

    def on_mount(self) -> None:
        """Called when app is mounted."""
        # Initialize database
        initialize_database()

        # Focus the input
        self.command_input.focus()

    def on_input_submitted(self, event: Input.Submitted) -> None:
        """Handle command submission."""
        command_str = event.value.strip()

        # Clear input first
        self.command_input.value = ""

        if not command_str and (self._awaiting_task_due_date):
            # Allow empty input for skipping due date
            self._handle_task_due_date_input("")
            return

        if not command_str:
            return

        # Check if we're waiting for specific input
        if self._awaiting_role_name:
            self._handle_role_name_input(command_str)
            return

        if self._awaiting_task_title:
            self._handle_task_title_input(command_str)
            return

        if self._awaiting_task_due_date:
            self._handle_task_due_date_input(command_str)
            return

        # Add to history
        self.command_input.add_to_history(command_str)

        # Parse and handle command
        self.handle_command(command_str)

    def handle_command(self, command_str: str) -> None:
        """Handle a command.

        Args:
            command_str: Command string to handle
        """
        command, args = parser.parse(command_str)
        parts = args.get('parts', [])

        # Exit command
        if command == "exit":
            self.exit()
            return

        # Help command
        elif command == "help":
            self.show_help()
            return

        # New role command
        elif command == "new" and parts and parts[0] == "role":
            self.create_new_role()
            return

        # Role selection (r1, r2, etc.)
        elif command.startswith("r") and len(command) > 1:
            try:
                role_num = int(command[1:])
                self.select_role(role_num)
            except ValueError:
                self.show_error(f"Invalid role number: {command}")
            return

        # Add task command
        elif command == "add":
            if not self.active_role_id:
                self.show_error("No role selected. Use 'r1' to select a role or 'new role' to create one.")
            else:
                self.create_new_task()
            return

        # Empty command
        elif command == "empty":
            pass

        # Unknown command
        else:
            self.show_error(f"Unknown command: {command_str}\n\nType 'help' for available commands.")

    def show_help(self) -> None:
        """Display help information."""
        help_text = """
Terminal Todo - Help

Available Commands:
  help                 Show this help message
  exit                 Exit the application (or press Ctrl+C)
  new role             Create a new role (coming in Iteration 2)

Navigation:
  Ctrl+C               Quit application
  Esc                  Clear command input
  �/�                  Navigate command history (coming soon)

Status: Iteration 2 - Core Flow Implementation
"""
        self.update_content(help_text)

    def create_new_role(self) -> None:
        """Create a new role with prompted input."""
        # For Iteration 2, use simple approach - show instruction, then wait for input
        self.update_content("Creating new role...\n\nEnter role name in the command box below:")
        self.command_input.placeholder = "Enter role name..."
        self._awaiting_role_name = True

    def _handle_role_name_input(self, role_name: str) -> None:
        """Handle role name input.

        Args:
            role_name: The role name entered by user
        """
        self._awaiting_role_name = False
        self.command_input.placeholder = "Type a command... (type 'help' for commands)"

        if not role_name or not role_name.strip():
            self.show_error("Role name cannot be empty")
            return

        # Auto-assign next color
        color_index = role_commands.get_next_color_index()
        color = get_role_color(color_index)

        # Create role
        role_id = role_commands.create_role(role_name, color)

        if role_id:
            # Automatically select the new role
            role = role_commands.get_role_by_id(role_id)
            self.active_role_id = role_id
            self.display_role_panel(role)
        else:
            self.show_error("Failed to create role")

    def select_role(self, display_number: int) -> None:
        """Select a role by display number.

        Args:
            display_number: Role display number (1, 2, 3, etc.)
        """
        role = role_commands.get_role_by_number(display_number)

        if not role:
            self.show_error(f"Role r{display_number} not found")
            return

        self.active_role_id = role['id']
        self.display_role_panel(role)

    def display_role_panel(self, role) -> None:
        """Display a role panel in the main content area.

        Args:
            role: Role database row
        """
        # Create or update role panel
        panel = RolePanel(
            role_id=role['id'],
            role_name=role['name'],
            display_number=role['display_number'],
            color=role['color'],
            is_active=True
        )

        self.current_panel = panel
        self.main_content.update(panel.render())

    def refresh_current_panel(self) -> None:
        """Refresh the currently displayed panel."""
        if self.current_panel:
            self.main_content.update(self.current_panel.render())

    def create_new_task(self) -> None:
        """Start task creation process."""
        if not self.active_role_id:
            self.show_error("No active role selected")
            return

        self.update_content("Creating new task...\n\nEnter task title in the command box below:")
        self.command_input.placeholder = "Enter task title..."
        self._awaiting_task_title = True

    def _handle_task_title_input(self, title: str) -> None:
        """Handle task title input.

        Args:
            title: Task title
        """
        self._awaiting_task_title = False
        self.command_input.placeholder = "Due date (or press Enter to skip)..."

        if not title or not title.strip():
            self.show_error("Task title cannot be empty")
            self.command_input.placeholder = "Type a command... (type 'help' for commands)"
            return

        self._pending_task_title = title
        self._awaiting_task_due_date = True
        self.update_content(f"Task title: {title}\n\nEnter due date (optional, press Enter to skip):\nFormats: 'tomorrow', 'today', 'DD MM YY', or '+3d'")

    def _handle_task_due_date_input(self, due_date_str: str) -> None:
        """Handle task due date input.

        Args:
            due_date_str: Due date string
        """
        self._awaiting_task_due_date = False
        self.command_input.placeholder = "Type a command... (type 'help' for commands)"

        # Create task
        task_id = task_commands.create_task(
            role_id=self.active_role_id,
            title=self._pending_task_title,
            due_date=due_date_str if due_date_str.strip() else None
        )

        if task_id:
            self.refresh_current_panel()
        else:
            self.show_error("Failed to create task")

        # Clean up
        self._pending_task_title = None

    def show_error(self, message: str) -> None:
        """Show an error message.

        Args:
            message: Error message to display
        """
        self.update_content(f"[red]Error:[/red] {message}")

    def show_success(self, message: str) -> None:
        """Show a success message.

        Args:
            message: Success message to display
        """
        self.update_content(f"[green]Success:[/green] {message}")

    def update_content(self, text: str) -> None:
        """Update main content area.

        Args:
            text: Text to display
        """
        self.main_content.update(text)

    def action_clear_input(self) -> None:
        """Clear the command input."""
        self.command_input.value = ""

    def action_quit(self) -> None:
        """Quit the application."""
        db.close()
        self.exit()


def run():
    """Run the application."""
    app = TodoApp()
    app.run()


if __name__ == "__main__":
    run()
